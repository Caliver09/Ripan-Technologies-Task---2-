<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Ticket Booking System</title>
  <!-- Bootstrap CSS CDN -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    body.dark-mode {
      background-color: #121212;
      color: #e0e0e0;
    }
    .card.dark-mode {
      background-color: #1e1e1e;
      border-color: #333;
    }
    .theme-toggle {
      position: fixed;
      top: 15px;
      right: 15px;
    }
  </style>
</head>
<body>
  <!-- Theme Toggle Button -->
  <button class="btn btn-secondary theme-toggle" id="themeToggle">Dark Mode</button>

  <div class="container my-4">
    <h1 class="mb-4">Ticket Booking System</h1>
    <!-- Navigation Tabs -->
    <ul class="nav nav-tabs" id="mainTabs" role="tablist">
      <li class="nav-item">
        <a class="nav-link active" id="events-tab" data-toggle="tab" href="#events" role="tab">Events</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="booking-tab" data-toggle="tab" href="#booking" role="tab">Booking</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="admin-tab" data-toggle="tab" href="#admin" role="tab">Admin Panel</a>
      </li>
    </ul>
    <div class="tab-content mt-4" id="tabContent">
      <!-- Events Tab -->
      <div class="tab-pane fade show active" id="events" role="tabpanel">
        <div id="eventList" class="row"></div>
      </div>
      <!-- Booking Tab -->
      <div class="tab-pane fade" id="booking" role="tabpanel">
        <h3>Book Your Tickets</h3>
        <form id="bookingForm">
          <div class="form-group">
            <label for="eventSelect">Select Event</label>
            <select class="form-control" id="eventSelect" required></select>
          </div>
          <div class="form-group">
            <label for="ticketCount">Number of Tickets</label>
            <input type="number" class="form-control" id="ticketCount" min="1" value="1" required>
          </div>
          <button type="submit" class="btn btn-primary">Book Tickets</button>
        </form>
      </div>
      <!-- Admin Panel Tab -->
      <div class="tab-pane fade" id="admin" role="tabpanel">
        <h3>Admin Panel</h3>
        <form id="adminForm">
          <div class="form-group">
            <label for="adminEventName">Event Name</label>
            <input type="text" class="form-control" id="adminEventName" required>
          </div>
          <div class="form-group">
            <label for="adminEventDesc">Description</label>
            <textarea class="form-control" id="adminEventDesc" rows="2" required></textarea>
          </div>
          <div class="form-group">
            <label for="adminTickets">Total Tickets</label>
            <input type="number" class="form-control" id="adminTickets" min="1" value="100" required>
          </div>
          <button type="submit" class="btn btn-success">Add / Update Event</button>
        </form>
        <hr>
        <h4>Manage Events</h4>
        <div id="adminEventList"></div>
      </div>
    </div>
  </div>

  <!-- Bootstrap & jQuery Scripts -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Simulated database using localStorage
    const EVENTS_KEY = 'ticketBookingEvents';

    // Sample initial events if none exist
    const initialEvents = [
      { id: 1, name: 'Concert Night', desc: 'Live concert of popular bands', total: 100, available: 100 },
      { id: 2, name: 'Movie Premiere', desc: 'Premiere of the latest blockbuster', total: 80, available: 80 },
      { id: 3, name: 'Theater Play', desc: 'A classic drama performance', total: 50, available: 50 }
    ];

    // Load events from localStorage or initialize them
    function loadEvents() {
      let events = JSON.parse(localStorage.getItem(EVENTS_KEY));
      if (!events) {
        events = initialEvents;
        localStorage.setItem(EVENTS_KEY, JSON.stringify(events));
      }
      return events;
    }

    function saveEvents(events) {
      localStorage.setItem(EVENTS_KEY, JSON.stringify(events));
    }

    // Render event list in Events Tab
    function renderEvents() {
      const events = loadEvents();
      const eventList = document.getElementById('eventList');
      eventList.innerHTML = '';
      events.forEach(event => {
        const col = document.createElement('div');
        col.className = 'col-md-4';
        col.innerHTML = `
          <div class="card mb-4">
            <div class="card-body">
              <h5 class="card-title">${event.name}</h5>
              <p class="card-text">${event.desc}</p>
              <p><strong>Available Tickets:</strong> ${event.available}</p>
            </div>
          </div>
        `;
        eventList.appendChild(col);
      });
      populateEventSelect();
      renderAdminEventList();
    }

    // Populate event select dropdown for booking
    function populateEventSelect() {
      const events = loadEvents();
      const eventSelect = document.getElementById('eventSelect');
      eventSelect.innerHTML = '';
      events.forEach(event => {
        // Only show events with available tickets
        if (event.available > 0) {
          const option = document.createElement('option');
          option.value = event.id;
          option.textContent = `${event.name} (${event.available} available)`;
          eventSelect.appendChild(option);
        }
      });
    }

    // Handle booking form submission
    document.getElementById('bookingForm').addEventListener('submit', function(e) {
      e.preventDefault();
      const eventId = parseInt(document.getElementById('eventSelect').value);
      const ticketCount = parseInt(document.getElementById('ticketCount').value);
      let events = loadEvents();
      const event = events.find(ev => ev.id === eventId);
      if (event) {
        if (ticketCount <= event.available) {
          event.available -= ticketCount;
          saveEvents(events);
          renderEvents();
          alert(`Booking confirmed for ${ticketCount} ticket(s) to "${event.name}".\nSimulating payment gateway...`);
        } else {
          alert(`Not enough tickets available for "${event.name}".`);
        }
      }
    });

    // Admin Panel: Add / Update event
    document.getElementById('adminForm').addEventListener('submit', function(e) {
      e.preventDefault();
      let events = loadEvents();
      const name = document.getElementById('adminEventName').value;
      const desc = document.getElementById('adminEventDesc').value;
      const totalTickets = parseInt(document.getElementById('adminTickets').value);

      // Check if event exists by name; if so, update it
      let event = events.find(ev => ev.name.toLowerCase() === name.toLowerCase());
      if (event) {
        event.desc = desc;
        // Increase available tickets based on updated total if necessary
        const diff = totalTickets - event.total;
        event.total = totalTickets;
        event.available += diff;
        alert(`Event "${name}" updated.`);
      } else {
        // Create new event with a unique id
        const newEvent = { id: Date.now(), name, desc, total: totalTickets, available: totalTickets };
        events.push(newEvent);
        alert(`Event "${name}" added.`);
      }
      saveEvents(events);
      renderEvents();
      this.reset();
    });

    // Render events list for admin management
    function renderAdminEventList() {
      const events = loadEvents();
      const adminEventList = document.getElementById('adminEventList');
      adminEventList.innerHTML = '';
      events.forEach(event => {
        const div = document.createElement('div');
        div.className = 'card mb-2';
        div.innerHTML = `
          <div class="card-body">
            <h5>${event.name}</h5>
            <p>${event.desc}</p>
            <p><strong>Total Tickets:</strong> ${event.total} | <strong>Available:</strong> ${event.available}</p>
            <button class="btn btn-danger btn-sm" onclick="deleteEvent(${event.id})">Delete</button>
          </div>
        `;
        adminEventList.appendChild(div);
      });
    }

    // Delete event (Admin)
    function deleteEvent(id) {
      let events = loadEvents();
      events = events.filter(ev => ev.id !== id);
      saveEvents(events);
      renderEvents();
      alert("Event removed successfully.");
    }

    // Theme toggle for light/dark mode
    document.getElementById('themeToggle').addEventListener('click', function() {
      document.body.classList.toggle('dark-mode');
      document.querySelectorAll('.card').forEach(card => card.classList.toggle('dark-mode'));
      this.textContent = document.body.classList.contains('dark-mode') ? 'Light Mode' : 'Dark Mode';
    });

    // Initialize page
    renderEvents();
  </script>
</body>
</html>
